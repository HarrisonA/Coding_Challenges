/**
  *
  * Implement a `map` method on this Tree class.
  *
  * Map accepts a mapping function as its only argument. It traverses the tree,
  * passing each node's value into the mapping function, and generates a new
  * tree containing the results.
  *
  * So `map` should return a tree with the same structure, and different values,
  * but it should NOT modify the tree that was passed in.
  *
  * Example:
  *   var root1 = new Tree(1);
  *   var branch2 = root1.addChild(2);
  *   var branch3 = root1.addChild(3);
  *   var leaf4 = branch2.addChild(4);
  *   var leaf5 = branch2.addChild(5);
  *   var leaf6 = branch3.addChild(6);
  *   var leaf7 = branch3.addChild(7);
  *   var newTree = root1.map(function (value) {
  *     return value * 2;
  *   })
  *  newTree.value // 2
  *  newTree.children[0].value // 4
  *  newTree.children[1].value // 6
  *  newTree.children[0].children[1].value // 10
  *  newTree.children[1].children[1].value // 14
  *  root1.value // still 1
  *

/*
 * Basic tree that stores a value.
 */


var Tree = function(value){
  this.value = value;
  this.children = [];
};

Tree.prototype.map = function (callback) {

// create a variable for the Tree copy
var treeCopy = new Tree();


  // create a recurisve function that will run the call back on each node
  // of the original tree and the copy tree

  var treeTraversal = function (tree, copy){
    // create a new tree????

    // copy the original tree's value
    var otherTree = copy;
    otherTree.value = tree.value;
    otherTree.children = [];


    // base case: if at the leaf, then run the callback on the orig tree's value
    // and save that value into the copy tree's value
    if (tree.children.length === 0){
      otherTree.value = callback(tree.value);
      return;

    } else {
      // loop through every child of the current orig tree node
        // create a new a copy tree node
        // give that new copy tree node the value that the old tree node has
        for (var i=0; i<tree.children.length; i++){
          var tempCopytree = new Tree();
          tempCopytree.value = tree.children[i].value;
        // add the temp copy tree node to the copy tree nodes' children array 
        // this will make sure the copy tree has the children trees of the current tree node
        otherTree.children.push(tempCopytree); 
      }

      // loop again through each child of the orig tree
        // call the recursive tree traversal function with the children of the orig tree and the copy tree
        for (var i=0; i<tree.children.length; i++){
          treeTraversal(tree.children[i], otherTree.children[i]);   
        // after the recursion ends, your back at the parent node, 
        // pass the orig tree's value into the call back and save it to the copy tree's value
        otherTree.value = callback(tree.value);
      } 
    }

  }

  // Call the recursive tree traversal on the instance that invoked this function and the copy tree
  treeTraversal(this, treeCopy);


  return treeCopy;
};


/*
  * Extra credit: Consider another method, `mapInPlace`, which DOES modify
  * the original tree instead of generating a new one. Why would you want to use this
  * method instead of `map`?
  
    Answer:  This would be needed if you wanted to update all the current node values 
    the same way.
  *
  */

  Tree.prototype.mapInPlace = function (callback) {
  //update the values of the existing tree with values generated by the callback

    // recursive function 
    var mapRecursion = function (tree){

      // update the current tree value with the callback result on the tree value
      tree.value = callback(tree.value);

      // if no children, return
      if (tree.children.length===0){
        return;
      }
      // loop through each child node and call the recursive function on that child
      for (var i=0; i<tree.children.length; i++){
          mapRecursion(tree.children[i]);
      }
    }

    // invoke the recursive function on instance tree that invoked mapInPlace   
    mapRecursion(this);
};

/**
 * You shouldn't need to change anything below here, but feel free to look.
 */

/**
  * add an immediate child
  * (wrap values in Tree nodes if they're not already)
  */
  Tree.prototype.addChild = function(child){
    if (!child || !(child instanceof Tree)){
      child = new Tree(child);
    }

    if(!this.isDescendant(child)){
      this.children.push(child);
    }else {
      throw new Error("That child is already a child of this tree");
    }
  // return the new child node for convenience
  return child;
};

/**
  * check to see if the provided tree is already a child of this
  * tree __or any of its sub trees__
  */
  Tree.prototype.isDescendant = function(child){
    if(this.children.indexOf(child) !== -1){
    // `child` is an immediate child of this tree
    return true;
  }else{
    for(var i = 0; i < this.children.length; i++){
      if(this.children[i].isDescendant(child)){
        // `child` is descendant of this tree
        return true;
      }
    }
    return false;
  }
};

/**
  * remove an immediate child
  */
  Tree.prototype.removeChild = function(child){
    var index = this.children.indexOf(child);
    if(index !== -1){
    // remove the child
    this.children.splice(index,1);
  }else{
    throw new Error("That node is not an immediate child of this tree");
  }
};

var root1 = new Tree(1);
var branch2 = root1.addChild(2);
var branch3 = root1.addChild(3);
var leaf4 = branch2.addChild(4);
var leaf5 = branch2.addChild(5);
var leaf6 = branch3.addChild(6);
var leaf7 = branch3.addChild(7);


var newTree = root1.map(function (value) {
 return value * 2;
});


